<div class="container">
	<form id="registration-body" class="panel">
		<h1 class="registration__form--title">Регистрация</h1>
		<p class="comment">* обозначены поля, обязательные для заполнения</p>

		<div class="optgroup">
			<label for="fullname">ФИО*</label>
			<input type="text" name="fullname" id="fullname" class="udata form__input" required />
		</div>

		<div class="optgroup">
			<label for="phone">Телефон*</label>
			<input type="tel" name="phone" id="phone" class="udata form__input" 
						placeholder="+7 (_ _ _) _ _ _ - _ _ - _ _" required/>
		</div>

		<div class="optgroup">
			<label for="email">E-mail*</label>
			<input type="email" name="_email" id="_email" class="udata form__input" 
						value="<TMPL_VAR NAME="email">" required/>
		</div>

		<div class="optgroup">
			<div class="registration__form--role">
				<label>Роль пользователя*</label>
				<div class="optrow">
					<div class="quant">
					<input type="checkbox" name="_umode" id="customer" class="udata" value="<TMPL_VAR NAME="customer">" required checked />
					<label for="role-customer">Заказчик</label>
					</div>
					<div class="quant">
					<input type="checkbox" name="_umode" id="carrier" class="udata" value="<TMPL_VAR NAME="carrier">" required />
					<label for="role-carrier">Перевозчик</label>
					</div>
				</div>
			</div>
		</div>

		<div class="optgroup">
			<div id="user-type" class="registration__form--role">
				<label>Субъект гражданского права*</label>
				<div class="optrow">
					<div class="quant">
					<input type="radio" name="_usubj" id="entity" class="udata" value="<TMPL_VAR NAME="entity">" required checked />
					<label for="entity-radio">Юридическое лицо</label>
					</div>
					<div class="quant">
					<input type="radio" name="_usubj" id="individual" class="udata" value="<TMPL_VAR NAME="individual">" required />
					<label for="individual-radio">Физическое лицо</label>
					</div>
				</div>
			</div>
		</div>

		<div id="upload_section">
			<span class="block_header">Загрузить документы:</span>
<TMPL_LOOP NAME="uploads">
			<div class="upload_block" id="<TMPL_VAR NAME="name">">
				<span class="span-title__info"><TMPL_VAR NAME="title"></span>
				<div class="fileholder" data-parent="<TMPL_VAR NAME="name">">
				</div>
				<div class="optrow">
				<button id="up_<TMPL_VAR NAME="name">progr" class="pgbar add" type="button">Добавить файл</button>
				</div>
			</div>
</TMPL_LOOP>
		</div>

		<p class="span-title__info">Нажимая кнопку Зарегистрировать, вы соглашаетесь с
			<a href="#">условиями обработки персональных данных</a>
		</p>
		<div class="buttonbar">
			<button id="register" type="button" class="form__btn">Зарегистрировать</button>
		</div>
	</form>
	<div id="alert" class="alert" style="display:none">
		<h1>Внимание!</h1>
		<p>Адрес электронной почты <span class="email"></span> уже зарегистрирован в системе.<br>
			Вы можете продолжить регистрацию с этим адресом, но в этом случае позаботьтесь о том, 
			чтобы у Ваших учетных записей были разные имена (login) для входа в систему.<br>
			Если Вы попросту забыли пароль от учетной записи, воспользуйтесь кнопкой:
		</p>
		<div class="buttonbar">
			<button type="button" class="form__btn" id="reset">Восстановить пароль</button>
		</div>
		<p>
			Щелкните по окну, чтобы закрыть его.
		</p>
	</div>
</div>

<script type="text/javascript">
const session = '<TMPL_VAR NAME="session">';

let comments = {
		'director': {'summary': 'Примечание',
				'detail': 'В случае, если от имени этого руководителя действует иное лицо, '
							+'также предоставляется копия доверенности (иного документа) на осуществление соответствующих '
							+'действий, заверенная его печатью '
							+'(при наличии печати) и подписанная руководителем или уполномоченным им лицом. '
							+'В случае, если указанная доверенность подписана лицом, уполномоченным руководителем, '
							+'также предоставляется копия документа, подтверждающего полномочия этого лица'
					},
		'ustav': {'summary': 'Примечание',
				'detail': 'Устав в последней редакции с учетом всех изменений и дополнений, '
							+'все страницы (страница-прошивка с отметкой налогового органа обязательна)'
				},
		'ogrn': {'summary': 'Примечание',
				'detail': 'Если организация зарегистрирована до 01.07.2002, то необходимо представить '
							+'свидетельство о внесении записи в ЕГРЮЛ об организации, созданной до 01.07.2002'
				},
		'passport': {'summary': 'Примечание',
				'detail': ''
				},
		'inn': {'summary': 'Примечание',
				'detail': ''
				},
		'stat': {'summary': 'Примечание',
				'detail': ''
				},
		'egrul': {'summary': 'Примечание',
				'detail': ''
				},
	};

let phoneFmt = function(i) {
		i.value = i.value.replace(/\D/g,'');
		i.value = i.value.replace(/^[78]/,'+7 ');
		i.value = i.value.replace(/^9/,'+7 9');
		i.value = i.value.replace(/^\+7\s*\(?(\d{3})\)?/,'+7 ($1) ');
		i.value = i.value.replace(/^\+7\s*\(?(\d{3})\)?\s*(\d{3})([^\-])/,'+7 ($1) $2-$3');
		i.value = i.value.replace(/^\+7\s*\(?(\d{3})\)?\s*(\d{3})[\-\s](\d{2})([^\-]+)/,'+7 ($1) $2-$3-$4');
		i.value = i.value.replace(/^\+7\s*\(?(\d{3})\)?\s*(\d{3})[\-\s](\d{2})[\-\s](\d{2}).+/,'+7 ($1) $2-$3-$4');
	};

let fadd = function(data) {
		data.data.forEach( f =>{
				let box = document.querySelector( 'div.fileholder[data-parent="'+f.field+'"]' );
				let frow = box.querySelector('.filerow.optrow[data-name="'+f.filename+'"]');
				if (frow) frow.parentNode.removeChild(frow);
				frow = createObj('div',{'className':'filerow optrow','title':f.filename,
											'data-field':f.field,'data-name':f.filename});
				frow.appendChild(createObj('a',{'href':f.url,'innerText':f.filename,'target':'_blank'}));
				frow.appendChild(createObj('button',{'type':'button','innerHTML':'&#10005;','className':'rm',
						'onclick':function(e) { 
								if ( confirm('Удалить '+f.filename+'?') ) {
									flush({'code':'rm','session':session,'field':f.field,'filename':f.filename,'fp':getCookie('fp')},
											document.location.origin+document.location.pathname, function(res) {
													if ( res.match(/^[\{\[]/) ) {
														res = JSON.parse(res);
														if ( res.code == 1 ) {
															frow.parentNode.removeChild(frow);
														}
													} else {
														alert('Не удалось: '+res);
													}
												});
								}
							}
					}));
				box.appendChild(frow);
			});
	};

function traceFile (host) {
	let pBar = document.getElementById(host.id+'progr');

	let to_url = host.dataset.url;
	pBar.style.backgroundImage = "url('/img/progress_bar.png')";
	pBar.style.backgroundSize = "5% 110%";
	pBar.style.backgroundRepeat = "no-repeat";
	pBar.style.backgroundPosition = "-1em center";

	let updateProgress = function(bar, value) {
							bar.style.backgroundSize = (value+10)+'% 110%';
						};

	let formData = {};			// Some special translations
	Object.keys(host.dataset).forEach( key => { formData[key] = host.dataset[key]} );

	new uploaderObject({			// Described at support.js
			file: host.files[0],
			url: to_url,
			fieldName: host.name || host.id,
			formData: formData,
			onprogress: function(percents) {
						updateProgress(pBar, percents);
					},
			
			oncomplete: function(done, res) {
				updateProgress(pBar, 100);
				setTimeout( function() {updateProgress(pBar, 0); pBar.removeAttribute('style')}, 1500 );
				let box = host.parentNode;
				if( done && res.match(/^[\{\[]/) ) {
					let data = JSON.parse(res);
					if ( data.fail ) {
						window.alert('Загрузка '+host.files[0].name+' не удалась\n'+data.fail);

					} else if(data.data.length > 0 && host.callback) {
						host.callback(data);
					}
				} else {
					window.alert('Загрузка '+host.files[0].name+' не удалась\n'+this.lastError.text);
					console.log('File '+host.files[0].name+' upload error : '+this.lastError.text);
				}
				let newFile = createObj('input',{'type':'file','id':host.id,'name':host.id,		// 'accept':host.accept, 
												'onchange': host.onchange,
												'callback': host.callback,
												'style.display':'none'
												});
				Object.keys(host.dataset).forEach( key => { newFile.dataset[key] = host.dataset[key]} );
				box.insertBefore(newFile, host);		// Reset to prevent duplicated processing
				box.removeChild(host);
			}
		});
}

document.addEventListener('DOMContentLoaded', function(e) {
	document.getElementById('alert').onclick = function(e) {document.getElementById('alert').style.display = "none"};
	document.getElementById('reset').onclick = function(e) {
			document.getElementById('alert').style.display = "none";
			let formData = { 'action':'reset', 'login':document.getElementById('_email').value,'fp':getCookie('fp') };
			flush({'code':'checkin','data':formData}, document.location.origin+'/', function(resp) {
					if ( resp.match(/^[\{\[]/) ) resp = JSON.parse(resp);
					if ( resp.data.action === 'reset') {
						if (resp.data.html_code ) {
							let alrt = document.getElementById('ralert');
							if ( !alrt ) {
								alrt = createObj('div',{'id':'ralert','className':'alert','style.display':'none',
												'onclick':function(e){ alrt.style.display = 'none' }});
								document.querySelector('#main div.container').appendChild(alrt);
							}
							alrt.innerHTML = resp.data.html_code;
							alrt.style.display = 'block';
						}
					}
				});
		};
	document.querySelector('input[type="tel"]').onkeypress = function(e) {
			if ( e.code.match(/^Key/) ) e.preventDefault();
			phoneFmt(e.target);
		};
	document.querySelector('input[type="tel"]').onpaste = function(e) {
			e.target.value = e.target.value.replace(/[^+^\d]/g, '');
			phoneFmt(e.target);
		};
	document.querySelector('input[type="tel"]').onchange = function(e) {
			phoneFmt(e.target);
		};

	document.querySelector('input[type="email"]').onfocus = function(e) { e.target.className = e.target.className.replace(/\s*fail/g,'') };
	document.querySelector('input[type="email"]').onchange = function(e) {
			e.target.className = e.target.className.replace(/\s*fail/g,'');
			flush( { 'code':'checkmail', 'data':{'email':e.target.value,'fp':getCookie('fp')} }, 
						document.location.origin+document.location.pathname,
						function(res) {
								if ( res.match(/^[\{\[]/) ) {
									res = JSON.parse(res);
									if (res.code == 1) {
										e.target.value = res.data.email;
										if ( res.data.warn ) {
											let alrt = document.getElementById('alert');
											alrt.querySelector('span.email').innerText = res.data.email;
											alrt.style.display = "block";
										}
									} else {
										e.target.className += ' fail';
									}
								}
							});
		};

	document.getElementById('register').onclick = function(e) {
			let inpts = document.querySelectorAll('.udata');
			let invalid;
			let formData = {'files':[],'session':session,'fp':getCookie('fp')};
			for ( nI=0; nI<inpts.length; nI++ ) {
				let ui = inpts[nI];
				if ( ui.type.match(/radio/i) ) {
					formData[ui.name] = ui.form.elements[ui.name].value;
				} else if ( ui.type.match(/check/i) ) {
					formData[ui.name] = (formData[ui.name] ? formData[ui.name] : 0) + (ui.checked ? ui.value*1 : 0);
				} else if( ui.value.replace(/\s/g,'').length == 0 ) {
					invalid = ui;
				} else if( ui.className.match(/fail/) ) {
					invalid = ui;
				} else {
					formData[ui.name] = ui.value;
				}
			}
			if ( invalid ) {
				invalid.scrollIntoView(false);
				invalid.focus();
				return false;
			} else {
				document.querySelectorAll('.filerow').forEach( fr =>{
						let row = {};
						Object.keys(fr.dataset).forEach( k => {
								row[k] = fr.dataset[k];
							});
						formData.files.push(row);
					});
				flush({'code':'register','data':formData}, document.location.origin+document.location.pathname, function(resp) {
						if ( resp.match(/^[\{\[]/) ) resp = JSON.parse(resp);
						if ( resp.code === '1') {
							if (resp.data.html_code ) {
								let alrt = document.getElementById('ralert');
								if ( !alrt ) {
									alrt = createObj('div',{'id':'ralert','className':'alert','style.display':'none',
												'onclick':function(e) { document.location = document.location.origin+'/' }});
									document.querySelector('#main div.container').appendChild(alrt);
								}
								alrt.scrollIntoView(false);
								alrt.innerHTML = resp.data.html_code;
								alrt.style.display = 'block';
							}
						} else {
							console.log(resp.fail);
							console.log(resp.warn);
						}
					});
			}
		};

	document.querySelectorAll('div.upload_block').forEach( b => {
			if ( comments[b.id] && comments[b.id].detail.length > 0 ) {
				let det = createObj('details',{'open':true});
				det.appendChild( createObj('summary',{'innerText':comments[b.id].summary}));
				det.appendChild( createObj('span',{'className':'span-title__info','innerText':comments[b.id].detail}));
				b.insertBefore(det, b.querySelector('.fileholder'));
			}
			let uploader = b.querySelector('input[type="file"]#up_'+b.id);
			if ( !uploader ) {
				uploader = createObj('input',{'type':'file','id':'up_'+b.id,'style.display':'none',		// 'accept':'image/*',
											'onchange':function() { 
														this.callback = fadd;
														this.dataset.code = 'upload';
														this.dataset.name = b.id;
														this.dataset.session = session;
														this.dataset.fp = getCookie('fp');
														this.dataset.url = document.location.origin+document.location.pathname;
														traceFile(this) }, 
												});
				b.appendChild(uploader);
			}	
			b.querySelector('button.add').onclick = function(e) {b.querySelector('input[type="file"]').click()};
		});
	if ( document.location.search ) {
		try { history.pushState(null, null, document.location.origin+document.location.pathname) } catch(e) {};
	}
});

//	U+2715	MULTIPLICATION X	&#10005;
// 	U+2716	HEAVY MULTIPLICATION X	&#10006;
</script>
